"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const proxy_controller_1 = require("../controllers/proxy.controller");
const router = express_1.Router();
router.route('/rings-api/rings/getPerformance').get(proxy_controller_1.getPerformance);
router.route('/rings-api/rings/token').get(proxy_controller_1.token);
router.route('/rings-api/rings/getCredentials').get(proxy_controller_1.getCredentials);
router.route('/rings-api/admin/userLog').get(proxy_controller_1.userLog);
router.route('/pdrservice/ticketAPI/consultarRFC').get(proxy_controller_1.consultarRFC);
router.route('/rings-api/rings/evidences').get(proxy_controller_1.evidences);
router.route('/rings-api/rings/changestatus').get(proxy_controller_1.changestatus);
router.route('/rings-api/rings/getIpRfc').get(proxy_controller_1.getIpRfc);
router.route('/pdrservice/proxyStep/validacionacceso').post(proxy_controller_1.validacionacceso);
router.route('/pdrservice/proxyStep/demo').get(proxy_controller_1.datosOSPFv2);
router.route('/pdrservice/proxyStep/validacionLLDP').get(proxy_controller_1.validacionLLDP);
router.route('/pdrservice/proxyModels/validateVRRP').post(proxy_controller_1.validateVRRP);
router.route('/pdrservice/proxyStep/validacionInterfaces').get(proxy_controller_1.validacionInterfaces);
router.route('/pdrservice/proxyStep/down').get(proxy_controller_1.down);
router.route('/pdrservice/proxyStep/DOWN2COMMIT').get(proxy_controller_1.DOWN2COMMIT);
router.route('/pdrservice/proxyStep/UP2COMMIT').get(proxy_controller_1.UP2COMMIT);
router.route('/pdrservice/proxyStep/up').get(proxy_controller_1.up);
router.route('/pdrservice/anillos/obtenerModeloVersionOLT').post(proxy_controller_1.obtenerModeloVersionOLT);
router.route('/rings-api/pruebas').get(proxy_controller_1.pruebas);
router.route('/pdrservice/proxyStep/datosBgpSumm').get(proxy_controller_1.ejecutaProtocolos);
router.route('/pdrservice/proxyStep/datosBgpAllSumm').get(proxy_controller_1.ejecutaProtocolos);
router.route('/pdrservice/proxyStep/validacionMPLS').get(proxy_controller_1.ejecutaProtocolos);
router.route('/pdrservice/proxyStep/servicioVoz').get(proxy_controller_1.servicioVoz);
router.route('/pdrservice/proxyStep/servicioInternet').get(proxy_controller_1.ejecutaProtocolosPOST);
router.route('/pdrservice/proxyStep/datosOSPFv2').post(proxy_controller_1.datosOSPFv2);
exports.default = router;
